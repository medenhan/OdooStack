AWSTemplateFormatVersion: '2010-09-09'
Description: 'Odoo stack with EC2, RDS, and ALB'

Parameters:
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
  DBPassword:
    NoEcho: true
    Type: String
    Description: Password for the RDS database
  OdooAdminPassword:
    NoEcho: true
    Type: String
    Description: Admin password for Odoo

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: Odoo VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: Odoo IGW

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Odoo Public Subnet 1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Odoo Public Subnet 2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Odoo Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  OdooSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP and SSH
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8069
          ToPort: 8069
          CidrIp: 0.0.0.0/0

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow PostgreSQL from Odoo instances
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref OdooSecurityGroup

  OdooLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: OdooLaunchTemplate
      LaunchTemplateData:
        ImageId: ami-0a0e5d9c7acc336f1  # Ubuntu 22.04 LTS - replace with the latest AMI ID
        InstanceType: t3.micro
        KeyName: !Ref KeyName
        SecurityGroupIds: 
          - !Ref OdooSecurityGroup
        UserData: 
          Fn::Base64: !Sub |
            #!/bin/bash
    
            # Update and install packages
            apt update && apt upgrade -y
            apt install -y git python3-pip python3-dev python3-venv python3-wheel libxslt-dev libzip-dev libldap2-dev libsasl2-dev python3-setuptools node-less postgresql postgresql-client libpq-dev build-essential
            
            # Create Odoo user and clone repository
            adduser --system --group --home=/opt/odoo --shell=/bin/bash odoo
            git clone --depth 1 --branch 17.0 https://www.github.com/odoo/odoo /opt/odoo/odoo
            chown -R odoo:odoo /opt/odoo
            
            # Set up Python virtual environment and install dependencies
            sudo -u odoo python3 -m venv /opt/odoo/venv
            /opt/odoo/venv/bin/pip install -r /opt/odoo/odoo/requirements.txt
            /opt/odoo/venv/bin/pip install psycopg2-binary
            
            # Create necessary directories
            mkdir /var/lib/odoo
            mkdir /var/log/odoo
            chown odoo:odoo /var/lib/odoo /var/log/odoo
            
            # Create Odoo configuration file
            cat <<EOF > /etc/odoo.conf
            [options]
            admin_passwd = ${OdooAdminPassword}
            db_host = ${OdooRDSInstance.Endpoint.Address}
            db_port = 5432
            db_user = odoo
            db_password = ${DBPassword}
            addons_path = /opt/odoo/odoo/addons
            logfile = /var/log/odoo/odoo.log
            proxy_mode = True
            EOF
            
            chown odoo:odoo /etc/odoo.conf
            chmod 640 /etc/odoo.conf
            
            # Create Odoo systemd service file
            cat <<EOF > /etc/systemd/system/odoo.service
            [Unit]
            Description=Odoo
            After=network.target postgresql.service
            [Service]
            Type=simple
            SyslogIdentifier=odoo
            PermissionsStartOnly=true
            User=odoo
            Group=odoo
            ExecStart=/opt/odoo/venv/bin/python3 /opt/odoo/odoo/odoo-bin -c /etc/odoo.conf
            StandardOutput=journal+console
            [Install]
            WantedBy=multi-user.target
            EOF
            
            systemctl daemon-reload
            systemctl enable odoo
            
            # Initialize Odoo database (add this near the end)
            sudo -u odoo /opt/odoo/venv/bin/python3 /opt/odoo/odoo/odoo-bin -c /etc/odoo.conf -d odoodb -i base --without-demo=all --stop-after-init
            
            # Start Odoo service
            systemctl start odoo

  OdooAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: 
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      LaunchTemplate:
        LaunchTemplateId: !Ref OdooLaunchTemplate
        Version: !GetAtt OdooLaunchTemplate.LatestVersionNumber
      MinSize: '2'
      MaxSize: '4'
      DesiredCapacity: '2'
      TargetGroupARNs: 
        - !Ref ALBTargetGroup

  OdooRDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: odoodb
      Engine: postgres
      MasterUsername: odoo
      MasterUserPassword: !Ref DBPassword
      DBInstanceClass: db.t3.micro
      AllocatedStorage: '20'
      PubliclyAccessible: false
      VPCSecurityGroups: 
        - !Ref RDSSecurityGroup
      DBSubnetGroupName: !Ref DBSubnetGroup

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for Odoo RDS
      SubnetIds: 
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP traffic to ALB
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Subnets: 
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: /web/login
      Name: OdooTargetGroup
      Port: 8069
      Protocol: HTTP
      TargetType: instance
      VpcId: !Ref VPC

Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::StackName}-VPCID"

  PublicSubnets:
    Description: A list of the public subnets
    Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]]
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnets"

  ALBDNSName:
    Description: DNS Name of the Application Load Balancer
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub "${AWS::StackName}-ALBDNS"

  RDSEndpoint:
    Description: Endpoint of the RDS instance
    Value: !GetAtt OdooRDSInstance.Endpoint.Address
    Export:
      Name: !Sub "${AWS::StackName}-RDSEndpoint"